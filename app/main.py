"""
Module principal de l'application PKI Service.

Ce module configure et initialise l'application FastAPI pour le service PKI,
incluant les middlewares de s√©curit√©, la configuration CORS, le logging,
et les endpoints de sant√© et m√©triques.

Architecture:
- FastAPI avec middlewares de s√©curit√© (CORS, TrustedHost, GZip)
- Logging structur√© avec niveaux configurables
- Endpoints de monitoring (/health, /ready, /metrics)
- Middleware de tracing avec x-trace-id
- Initialisation automatique de la base de donn√©es

Sc√©narios:
- Nominal: Application d√©marre correctement, middlewares actifs, DB initialis√©e
- Alternatif: Erreur de configuration ‚Üí logs d'erreur, application non fonctionnelle
- Alternatif: Erreur DB ‚Üí logs d'erreur, endpoints de sant√© disponibles mais fonctionnalit√©s limit√©es
"""

from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from app.routers import router
from app.database import engine, check_database_connection
from app.models import Base
import logging
import uuid
from app.settings import settings

# Configuration de l'application
DESCRIPTION = """
üîê **PKI Service - Infrastructure de Gestion de Cl√©s Cryptographiques**

Service microservice s√©curis√© pour la g√©n√©ration, le stockage chiffr√©, la r√©vocation,
la rotation et la consultation de paires de cl√©s cryptographiques (RSA, ECDSA, Ed25519).

**Fonctionnalit√©s principales:**
- üîë G√©n√©ration de cl√©s avec validation et chiffrement Fernet
- üõ°Ô∏è Stockage s√©curis√© avec expiration et r√©vocation
- üîÑ Rotation automatique des cl√©s
- üìä Statistiques et monitoring complet
- üîí Authentification JWT et autorisation par r√¥les
- üìà M√©triques Prometheus et observabilit√©

**S√©curit√©:**
- Cl√©s priv√©es chiffr√©es avec Fernet
- Authentification JWT obligatoire
- CORS configur√© et TrustedHost activ√©
- Logs structur√©s avec tracing
- Validation stricte des entr√©es

**Architecture:**
- FastAPI asynchrone avec SQLAlchemy 2.0
- PostgreSQL pour la persistance
- Redis pour le cache (optionnel)
- Celery pour les t√¢ches asynchrones
- Alembic pour les migrations
"""
VERSION = "1.0.0"

# Initialisation de l'application FastAPI
app = FastAPI(
    title="PKI Service",
    description=DESCRIPTION,
    version=VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)

# Configuration du logging structur√©
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL.upper(), logging.WARNING),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("pki-service")

# Middleware de compression GZip (optimisation performance)
app.add_middleware(GZipMiddleware, minimum_size=500)

# Middleware de s√©curit√© - Hosts de confiance
app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["localhost", "127.0.0.1", "*.localhost", "*.angara.vertex-cam.com"]
)

# Configuration CORS s√©curis√©e
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.get_allowed_origins_list(),
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["Authorization", "Content-Type", "X-Trace-ID", "X-Request-ID"]
)

@app.on_event("startup")
async def startup_event():
    """
    G√®re les √©v√©nements de d√©marrage de l'application.
    Initialise la base de donn√©es et v√©rifie sa connexion.
    
    Sc√©narios:
    - Nominal: La base de donn√©es est initialis√©e et les tables sont cr√©√©es/v√©rifi√©es.
    - Alternatif: Une erreur se produit lors de l'initialisation de la base de donn√©es,
      le service ne d√©marre pas correctement.
    """
    logger.info("D√©marrage du service PKI...")
    try:
        # Initialisation de la base de donn√©es (cr√©ation des tables si elles n'existent pas)
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("Tables de la base de donn√©es cr√©√©es/v√©rifi√©es avec succ√®s.")
        
        # V√©rification de la connexion √† la base de donn√©es
        if not await check_database_connection():
            raise ConnectionError("La connexion √† la base de donn√©es a √©chou√© au d√©marrage.")
        
        logger.info("Service PKI pr√™t √† recevoir des requ√™tes.")
    except Exception as e:
        logger.critical(f"√âchec critique au d√©marrage du service PKI: {str(e)}")
        # En production, on pourrait vouloir quitter l'application ici
        # sys.exit(1) # D√©commenter pour forcer l'arr√™t en cas d'√©chec critique

# Inclusion des routes de l'API
app.include_router(router)

# Endpoints de sant√© et de pr√©paration
@app.get("/health", include_in_schema=False, tags=["Monitoring"])
async def health() -> dict:
    """
    Endpoint de sant√© (liveness probe).
    
    V√©rifie que l'application est en vie et r√©pond aux requ√™tes.
    Utilis√© par Kubernetes et les load balancers pour d√©tecter
    si le service doit √™tre red√©marr√©.
    
    Returns:
        dict: Statut de sant√© de l'application
        
    Sc√©narios:
    - Nominal: Retourne {"status": "ok"} si l'application fonctionne
    - Alternatif: Timeout ou erreur ‚Üí le service est consid√©r√© comme down
    """
    return {"status": "ok", "service": "pki", "version": VERSION}

@app.get("/ready", include_in_schema=False, tags=["Monitoring"])
async def ready() -> dict:
    """
    Endpoint de pr√©paration (readiness probe).
    
    V√©rifie que l'application est pr√™te √† recevoir du trafic.
    Diff√©rent de /health car il peut v√©rifier des d√©pendances
    comme la base de donn√©es, Redis, etc.
    
    Returns:
        dict: Statut de pr√©paration de l'application
        
    Sc√©narios:
    - Nominal: Retourne {"status": "ready"} si toutes les d√©pendances sont OK
    - Alternatif: DB inaccessible ‚Üí {"status": "not_ready"} ‚Üí pas de trafic
    """
    try:
        # V√©rification de la connexion √† la base de donn√©es
        db_ready = await check_database_connection()
        if db_ready:
            return {"status": "ready", "service": "pki", "version": VERSION}
        else:
            return {"status": "not_ready", "reason": "database_unavailable"}
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification de pr√©paration: {str(e)}")
        return {"status": "not_ready", "reason": "check_failed"}

# Middleware de tracing et m√©triques
@app.middleware("http")
async def trace_and_metrics(request: Request, call_next):
    """
    Middleware de tracing et collecte de m√©triques.
    
    Ajoute un trace ID √† chaque requ√™te pour le suivi des logs
    et collecte des m√©triques de base (nombre de requ√™tes).
    
    Args:
        request: Requ√™te HTTP entrante
        call_next: Fonction pour traiter la requ√™te suivante
        
    Returns:
        Response: R√©ponse HTTP avec headers de tracing
        
    Sc√©narios:
    - Nominal: Trace ID ajout√©, m√©triques incr√©ment√©es, r√©ponse retourn√©e
    - Alternatif: Erreur dans le middleware ‚Üí trace ID manquant dans les logs
    """
    # G√©n√©ration ou r√©cup√©ration du trace ID
    trace_id = request.headers.get("x-trace-id") or str(uuid.uuid4())
    
    # Initialisation du compteur de requ√™tes si n√©cessaire
    if not hasattr(app.state, "request_count"):
        app.state.request_count = 0
    app.state.request_count += 1
    
    # Traitement de la requ√™te
    response = await call_next(request)
    
    # Ajout du trace ID dans les headers de r√©ponse
    response.headers["x-trace-id"] = trace_id
    
    # Log de la requ√™te avec trace ID
    logger.info(f"Request {request.method} {request.url.path} - Trace ID: {trace_id}")
    
    return response

@app.get("/metrics", include_in_schema=False, response_class=PlainTextResponse, tags=["Monitoring"])
async def metrics() -> str:
    """
    Endpoint de m√©triques Prometheus.
    
    Fournit des m√©triques au format Prometheus pour le monitoring
    de l'application. Inclut le nombre total de requ√™tes et
    des informations statiques sur le service.
    
    Returns:
        str: M√©triques au format Prometheus
        
    Sc√©narios:
    - Nominal: Retourne les m√©triques au format Prometheus
    - Alternatif: Erreur de collecte ‚Üí m√©triques partielles ou vides
    """
    total_requests = getattr(app.state, "request_count", 0)
    
    # Format Prometheus
    lines = [
        "# HELP service_requests_total Total number of HTTP requests",
        "# TYPE service_requests_total counter",
        f"service_requests_total{{service=\"pki-service\",version=\"{VERSION}\"}} {total_requests}",
        "",
        "# HELP service_info Service static information",
        "# TYPE service_info gauge",
        f"service_info{{service=\"pki-service\",version=\"{VERSION}\"}} 1",
        "",
        "# HELP service_uptime_seconds Service uptime in seconds",
        "# TYPE service_uptime_seconds gauge",
        f"service_uptime_seconds{{service=\"pki-service\"}} {getattr(app.state, 'startup_time', 0)}",
    ]
    
    return "\n".join(lines) + "\n"